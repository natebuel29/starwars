{"version":3,"sources":["components/Buttons.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Buttons","_ref","onClick","react_default","a","createElement","className","id","Card","name","p1","p2","p3","p4","capitilize","string","charAt","toUpperCase","slice","toString","replace","CardList","data","type","sort","b","episode_id","map","info","i","array","Object","entries","src_components_Card","key","Scroll","props","style","overflowY","borderTop","height","children","SearchBox","searchfield","onSearch","placeholder","onChange","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","state","doneLoading","fetchThis","address","setState","fetch","then","response","json","stwapi","previous","concat","results","next","urls","target","value","_this2","starwars","_this$state","filteredData","filter","toLowerCase","includes","title","components_SearchBox","src_components_Buttons","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b08bd60d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Buttons.css';\r\nimport 'tachyons';\r\n\r\nconst Buttons = ({onClick})=>{\r\n\treturn(\r\n\t<div className='flex-wrap'>\r\n     \t\t\t<button id=\"2\" onClick={onClick} className='mh4 mv2'>Films</button>\r\n     \t\t\t<button id=\"1\" onClick={onClick} className='mh4 mv2'>Planets</button>\r\n     \t\t\t<button id=\"5\" onClick={onClick} className='mh4 mv2'>Starships</button>\r\n     \t\t\t<button id=\"4\" onClick={onClick} className='mh4 mv2'>Vehicles</button>\r\n     \t\t\t<button id=\"0\" onClick={onClick} className='mh4 mv2'>People</button>\r\n     \t\t\t<button id=\"3\"onClick={onClick} className='mh4 mv2'>Species</button>\r\n     \t</div>\r\n     \t)\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({name,p1,p2,p3,p4})=>{\r\n\r\n\tconst capitilize = (string)=>{\t\r\n\t\tif(typeof string ==='string'){\r\n\t\t\treturn string.charAt(0).toUpperCase() +string.slice(1)\r\n\t\t}\r\n\t\telse \r\n\t\t\treturn string.toString();\r\n\t}\r\n\r\n\t\treturn(\r\n\t\t<div className='cardBorder tc mw6 dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<div className=\"\">\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{capitilize(p1[0]).replace(/_/g,' ')}: {capitilize(p1[1])}</p>\r\n\t\t\t\t<p>{capitilize(p2[0]).replace(/_/g,' ')}: {capitilize(p2[1])}</p>\r\n\t\t\t\t<p>{capitilize(p3[0]).replace(/_/g,' ')}: {capitilize(p3[1])}</p>\r\n\t\t\t\t<p>{capitilize(p4[0]).replace(/_/g,' ')}: {capitilize(p4[1])}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n\t\r\n\t\r\n\t}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ data,type })=>{\r\n\tdata.sort((a,b)=>{\r\n\t\treturn (a.name > b.name) ? 1 : (a.name === b.name) ? ((a.episode_id > b.episode_id) ? 1 : -1):-1;\r\n\t});\t\r\n\treturn(<div>\r\n\t\t\t {\t\t \t\r\n\t\t \t\tdata.map((info,i)=>{\r\n\t\t\t \tconst array = Object.entries(info);\r\n\t\t return <Card key={i} id={i} name={array[0][1]} p1={array[1]} p2={array[2]} \r\n\t\t \t\tp3={array[3]} p4={array[4]}/>})} \r\n\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll= (props)=>{\r\n\treturn (\r\n\t\t<div style ={{overflowY:'scroll' ,borderTop: '2px solid #FFE81F' ,height:'1000px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>)\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,onSearch})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\t className='pa3 ba b--yellow bg-lighest yellow'\r\n\t\t type='search' placeholder='Search..'\r\n\t\t onChange={onSearch}/>\r\n\t\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\n\nimport Buttons from '../components/Buttons';\nimport CardList from '../components/CardList';\nimport Card from '../components/Card';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css'\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state ={\t\n\t\t\tdoneLoading:true,\n\t\t\tdata:[],\n\t\t\turls:[ \"https://swapi.co/api/people/\",\n\t\t\t\t\t\"https://swapi.co/api/planets/\",\n\t\t\t\t\t\"https://swapi.co/api/films/\",\n\t\t\t\t\t\"https://swapi.co/api/species/\",\n\t\t\t\t\t\"https://swapi.co/api/vehicles/\",\n\t\t\t\t\t\"https://swapi.co/api/starships/\"\n\t\t\t\t\t],\n\t\t\tsearchfield:''\n\t\t};\n\n}\n\ncomponentDidMount(){\n\tfetch('https://swapi.co/api/')\n\t.then(response=>response.json())\n\t.then(data=>{\n\t\tthis.setState({starwars:data})\n\t})\n}\n\nonClick = (event)=>{\n\tif(this.state.doneLoading===true){\n\t\tlet fetchThis = (address)=>{\n\t\t\t\t\tthis.setState({doneLoading:false});\n\t\t\t\t\tfetch(address)\n\t\t\t\t\t.then(response=>response.json())\n\t\t\t\t\t.then(stwapi=>{\n\t\t\t\t\t\tif(stwapi.previous===null){\n\t\t\t\t\t\t\tthis.setState({data:[]});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setState({data:this.state.data.concat(stwapi.results)})\n\t\t\t\t\t\tif(stwapi.next===null){\n\t\t\t\t\t\t\tthis.setState({doneLoading:true});\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tfetchThis(stwapi.next);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tlet tempArray = this.state.urls\n\t\t\t\t\tfetchThis(tempArray[event.target.id]);\n\t\t\t\t\tthis.setState({type:event.target.id});\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\nonSearch= (event)=>{\n\tthis.setState({searchfield:event.target.value});\n\t}\n\nrender(){\n\tconst {data , searchfield} = this.state;\n\tconst filteredData = data.filter(info=>{\n\t\tif(typeof info.name !== 'undefined'){\n\t\treturn info.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t}\n\t\telse{\n\t\t\treturn info.title.toLowerCase().includes(searchfield.toLowerCase());\n\t\t}\n\t})\n\treturn(\n    <div className='tc'>\n     \t<h1 className=\"header\">Star Wars</h1> \n     \t<SearchBox onSearch={this.onSearch} />\n     \t<Buttons onClick={this.onClick}/>\n     \t<Scroll>\n     \t<CardList data={filteredData} />\n     \t</Scroll>\n    </div>    );\n}\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}